@{
    //CommentForm component: This component would allow a user to add a new comment to a post. It would have a textarea input field and buttons to submit and close.
}

@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using Blog.Core.DTO
@using System.Text.RegularExpressions;
@using Blog.Core.Entities;
@inject NavigationManager NavigationManager
@inject ILogger<CommentForm> logger

<div>
    <label for="comment-content">Add a comment...</label>
    <textarea id="comment-content" style="height: 100px; width: 100%;" @bind-Value="@CommentContent" @bind-Value:event="oninput"></textarea><br />
    <button @onclick="SaveComment">Save</button>
</div>

@code {

    public string CommentContent { get; set; }

    [Parameter]
    public EventCallback<CommentDto> OnCommentCreated { get; set; }

    [Parameter]
    public PostDto ConnectedItem { get; set; }

    [Inject]
    private HttpClient HttpClient { get; set; }

    private async Task SaveComment()
    {
        try
        {
            var comment = new CommentDto
                {
                    Content = CommentContent,
                    UserId = 1,
                    PostId = ConnectedItem.Id
                };

            var response = await HttpClient.PostAsJsonAsync("api/Comments", comment);
            response.EnsureSuccessStatusCode();
            await OnCommentCreated.InvokeAsync(comment);
            CommentContent = "";
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "an error occurred while trying to create comment...");
        }
    }

}